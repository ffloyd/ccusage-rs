name: Release

on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  release:
    name: Release ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            archive: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Install musl-tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cross build --release --target ${{ matrix.target }}

      - name: Build archive (*nix)
        if: matrix.archive == 'tar.gz'
        run: |
          staging="ccusage-rs-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp target/${{ matrix.target }}/release/ccusage-rs "$staging/"
          cp README.md LICENSE "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      - name: Build archive (Windows)
        if: matrix.archive == 'zip'
        shell: bash
        run: |
          staging="ccusage-rs-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p "$staging"
          cp target/${{ matrix.target }}/release/ccusage-rs.exe "$staging/"
          cp README.md LICENSE "$staging/"
          7z a "$staging.zip" "$staging"
          echo "ASSET=$staging.zip" >> $GITHUB_ENV

      - name: Upload binaries to release
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ASSET }}
          path: ${{ env.ASSET }}

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      - name: Generate release notes
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Get the previous release tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Get commits since last release
          if [ -n "$PREVIOUS_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges ${PREVIOUS_TAG}..HEAD)
            COMMIT_RANGE="since ${PREVIOUS_TAG}"
          else
            COMMITS=$(git log --oneline --no-merges)
            COMMIT_RANGE="for initial release"
          fi
          
          # Get file changes
          if [ -n "$PREVIOUS_TAG" ]; then
            FILES_CHANGED=$(git diff --name-only ${PREVIOUS_TAG}..HEAD)
          else
            FILES_CHANGED=$(git ls-files)
          fi

          PROMPT_CONTENT="Create professional release notes for ccusage-rs version ${{ github.ref_name }}.

          ## Commits ${COMMIT_RANGE}:
          ${COMMITS}

          ## Files changed:
          ${FILES_CHANGED}

          Please create release notes that:
          - Summarize new features and improvements from the commits
          - Highlight any bug fixes
          - Note breaking changes (if any)
          - Include installation instructions with cargo-binstall as the recommended method
          - List supported platforms (Linux x86_64/ARM64/musl, macOS Intel/Apple Silicon, Windows x86_64)
          - Keep it concise and professional
          - Format as markdown suitable for GitHub releases

          Focus on user-facing changes and benefits."

          timeout 30m claude -p "${PROMPT_CONTENT}" > release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body_path: release_notes.md
          files: artifacts/*/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}